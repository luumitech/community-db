// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../src/app/graphql/generated/pothos-types.ts"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

/// Describe a user in the system
model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  /// unique email identifying user document
  email      String      @unique
  name       String?
  accessList Access[]
  Property   Property[]
  Community  Community[]
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

/// Access document describes one user's access permission
/// to one community document
model Access {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Community {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  shortId           String                @default(nanoid(6))
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  updatedById       String?               @db.ObjectId
  updatedBy         User?                 @relation(fields: [updatedById], references: [id], onDelete: Cascade)
  name              String
  /// List of events supported (can be sorted)
  eventList         SupportedSelectItem[]
  /// List of payment method supported (can be sorted)
  paymentMethodList SupportedSelectItem[]
  accessList        Access[]
  propertyList      Property[]
}

type SupportedSelectItem {
  /// select item name
  name   String
  /// Should select item name be visible in selection list
  hidden Boolean?
}

model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  shortId        String       @default(nanoid(6))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedById    String?      @db.ObjectId
  updatedBy      User?        @relation(fields: [updatedById], references: [id], onDelete: Cascade)
  address        String
  streetNo       String?
  streetName     String?
  postalCode     String?
  notes          String?
  occupantList   Occupant[]
  membershipList Membership[]
  communityId    String       @db.ObjectId
  community      Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)

  // Add text index on fields that are searchable
  @@fulltext([address, occupantList.firstName, occupantList.lastName])
}

/// Occupant information within a property
type Occupant {
  firstName String?
  lastName  String?
  // Opt out of communication
  optOut    Boolean?
  email     String?
  home      String?
  work      String?
  cell      String?
}

/// Event Information
type Event {
  eventName String
  eventDate DateTime?
}

/// Membership information within a property
type Membership {
  year              Int
  isMember          Boolean?
  /// List of events attended
  eventAttendedList Event[]
  paymentMethod     String?
  paymentDeposited  Boolean?
}
