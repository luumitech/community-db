// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../src/app/graphql/generated/pothos-types.ts"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

/// Describe a user in the system
model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  /// unique email identifying user document
  email        String        @unique
  name         String?
  /// Subscription information (has client paid for subscription?)
  subscription Subscription?

  accessList             Access[]    @relation("accessUser")
  communityOwnerList     Community[] @relation("communityOwner")
  communityUpdatedByList Community[] @relation("communityUpdatedBy")
  propertyUpdatedByList  Property[]  @relation("propertyUpdatedBy")
}

/// Type of payment processor supported by the app
enum PaymentProcessor {
  /// no payment has been made
  NONE
  /// granted life-time license
  GRANTED
  /// paid via helcim
  HELCIM
}

/// Paid customer subscription information
type Subscription {
  paymentType    PaymentProcessor
  /// Subscription ID associated with the PaymentProcessor
  subscriptionId String?
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

/// Access document describes one user's access permission
/// to one community document
model Access {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  userId      String    @db.ObjectId
  user        User      @relation(name: "accessUser", fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
  community   Community @relation(name: "accessCommunity", fields: [communityId], references: [id], onDelete: Cascade)
}

model Community {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  shortId           String                @default(nanoid(6))
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  updatedById       String?               @db.ObjectId
  updatedBy         User?                 @relation(name: "communityUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
  /// Owner/Creator of community
  ownerId           String                @db.ObjectId
  owner             User                  @relation(name: "communityOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  name              String
  /// minimum membership year represented in database
  minYear           Int?
  /// maximum membership year represented in database
  maxYear           Int?
  /// List of events supported (can be sorted)
  eventList         SupportedSelectItem[]
  /// List of payment method supported (can be sorted)
  paymentMethodList SupportedSelectItem[]

  accessList   Access[]   @relation("accessCommunity")
  propertyList Property[] @relation("propertyCommunity")
}

type SupportedSelectItem {
  /// select item name
  name   String
  /// Should select item name be visible in selection list
  hidden Boolean?
}

model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  shortId        String       @default(nanoid(6))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedById    String?      @db.ObjectId
  updatedBy      User?        @relation(name: "propertyUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
  address        String
  streetNo       Int?
  streetName     String?
  postalCode     String?
  notes          String?
  occupantList   Occupant[]
  membershipList Membership[]
  communityId    String       @db.ObjectId
  community      Community    @relation(name: "propertyCommunity", fields: [communityId], references: [id], onDelete: Cascade)
}

/// Occupant information within a property
type Occupant {
  firstName String?
  lastName  String?
  // Opt out of communication
  optOut    Boolean?
  email     String?
  home      String?
  work      String?
  cell      String?
}

/// Event Information
type Event {
  eventName String
  eventDate DateTime?
  /// Number of tickets given out for this event
  ticket    Int?
}

/// Membership information within a property
type Membership {
  year              Int
  /// List of events attended
  eventAttendedList Event[]
  paymentMethod     String?
  paymentDeposited  Boolean?
  price             String?
}
