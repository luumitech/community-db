// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../src/app/graphql/generated/pothos-types.ts"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// Describe a user in the system
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  accessList Access[]
}

enum Role {
  ADMIN
  VIEW
}

/// Access document describes one user's access permission
/// to one community document
model Access {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Community {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  updatedBy    String?
  name         String
  accessList   Access[]
  propertyList Property[]
}

model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedBy      String?
  address        String
  streetNo       String?
  streetName     String?
  postalCode     String?
  notes          String?
  occupantList   Occupant[]
  membershipList Membership[]
  communityId    String       @db.ObjectId
  community      Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)

  // Add text index on fields that are searchable
  @@fulltext([address, occupantList.firstName, occupantList.lastName])
}

/// Occupant information within a property
type Occupant {
  firstName String?
  lastName  String?
  // Opt out of communication
  optOut    Boolean?
  email     String?
  home      String?
  work      String?
  cell      String?
}

/// Event Information
type Event {
  eventName String
  eventDate DateTime?
}

/// Membership information within a property
type Membership {
  year              Int
  isMember          Boolean?
  /// List of events attended
  eventAttendedList Event[]
  paymentMethod     String?
  paymentDeposited  Boolean?
}
