// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../src/app/graphql/generated/pothos-types.ts"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

/// Describe a user in the system
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  /// Subscription information (has client paid for subscription?)
  subscription Subscription?

  accessList             Access[]    @relation("accessUser")
  communityOwnerList     Community[] @relation("communityOwner")
  communityUpdatedByList Community[] @relation("communityUpdatedBy")
  propertyUpdatedByList  Property[]  @relation("propertyUpdatedBy")
}

/// Better-auth
/// See: https://www.better-auth.com/docs/concepts/database#user
model AuthUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String
  emailVerified Boolean
  name          String?
  image         String?
  sessionList   Session[] @relation("sessionUser")
  accountList   Account[] @relation("accountUser")
}

/// Better-auth
/// See: https://www.better-auth.com/docs/concepts/database#session
model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  userId String   @db.ObjectId
  user   AuthUser @relation(name: "sessionUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Better-auth
/// See: https://www.better-auth.com/docs/concepts/database#account
model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?

  userId String   @db.ObjectId
  user   AuthUser @relation(name: "accountUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Better-auth
/// See: https://www.better-auth.com/docs/concepts/database#verification
model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Type of payment processor supported by the app
enum PaymentProcessor {
  /// no payment has been made
  NONE
  /// granted life-time license
  GRANTED
  /// paid via helcim
  HELCIM
}

/// Paid customer subscription information
type Subscription {
  paymentType    PaymentProcessor
  /// Subscription ID associated with the PaymentProcessor
  subscriptionId String?
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

/// Access document describes one user's access permission
/// to one community document
model Access {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  userId      String    @db.ObjectId
  user        User      @relation(name: "accessUser", fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
  community   Community @relation(name: "accessCommunity", fields: [communityId], references: [id], onDelete: Cascade)
}

model Community {
  id                String                   @id @default(auto()) @map("_id") @db.ObjectId
  shortId           String                   @default(nanoid(6))
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  updatedById       String?                  @db.ObjectId
  updatedBy         User?                    @relation(name: "communityUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
  /// Owner/Creator of community
  ownerId           String                   @db.ObjectId
  owner             User                     @relation(name: "communityOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  name              String
  /// minimum membership year represented in database
  minYear           Int?
  /// maximum membership year represented in database
  maxYear           Int?
  /// List of events supported (can be sorted)
  eventList         SupportedEventItem[]
  /// List of tickets supported (can be sorted)
  ticketList        SupportedTicketItem[]
  /// List of payment method supported (can be sorted)
  paymentMethodList SupportedPaymentMethod[]
  /// default settings
  defaultSetting    DefaultSetting?
  /// mailchimp settings
  mailchimpSetting  MailchimpSetting?
  /// Geoapify settings
  geoapifySetting   GeoapifySetting?

  accessList   Access[]   @relation("accessCommunity")
  propertyList Property[] @relation("propertyCommunity")
}

/// Default template for sending email
type EmailSetting {
  subject String
  cc      String[]
  message String
}

type DefaultSetting {
  /// Default yearly membership fee
  membershipFee   String?
  /// Membership confirmation email template
  membershipEmail EmailSetting?
}

/// Mailchimp integration setting
type MailchimpSetting {
  apiKey String?
}

/// Geoapify integration setting
type GeoapifySetting {
  apiKey String?
}

type SupportedEventItem {
  /// select item name
  name   String
  /// Should select item name be visible in selection list
  hidden Boolean?
}

type SupportedTicketItem {
  /// select item name
  name      String
  /// Default ticket count for ticket item
  count     Int?
  /// Default price per ticket
  unitPrice String?
  /// Should select item name be visible in selection list
  hidden    Boolean?
}

type SupportedPaymentMethod {
  /// select item name
  name   String
  /// Should select item name be visible in selection list
  hidden Boolean?
}

model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  shortId        String       @default(nanoid(6))
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  updatedById    String?      @db.ObjectId
  updatedBy      User?        @relation(name: "propertyUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
  address        String
  streetNo       Int?
  streetName     String?
  city           String?
  country        String?
  postalCode     String?
  /**
   * Since Prisma mongo connector does not support Decimal type,
   * both lat and lon are stored as string type
   */
  lat            String?
  lon            String?
  notes          String?
  occupantList   Occupant[]
  membershipList Membership[]
  communityId    String       @db.ObjectId
  community      Community    @relation(name: "propertyCommunity", fields: [communityId], references: [id], onDelete: Cascade)
}

/// Occupant information within a property
type Occupant {
  firstName String?
  lastName  String?
  /// Opt out of communication (i.e. unsubscribed)
  optOut    Boolean?
  infoList  ContactInfo[]
}

/// Type of contact information
enum ContactInfoType {
  /// email address
  EMAIL
  /// phone number
  PHONE
  OTHER
}

/// Arbitrary Contact Information (can be email, phone, website, etc..)
type ContactInfo {
  /// (eg. work)
  label String
  /// (eg. EMAIL)
  type  ContactInfoType
  /// Interpret differently base on type
  value String
}

/// Event Information
type Event {
  eventName  String
  eventDate  DateTime?
  ticketList Ticket[]
}

/// Event Ticket Information
type Ticket {
  ticketName    String
  /// Number of tickets issued
  count         Int?
  price         String?
  paymentMethod String?
}

/// Membership information within a property
type Membership {
  year              Int
  /// List of events attended
  eventAttendedList Event[]
  /// Price paid for membership
  price             String?
  paymentMethod     String?
  paymentDeposited  Boolean?
}
